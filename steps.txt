1. Create MongoDB account and get the connection URI.
    MongoDB URI - "mongodb+srv://navaneethan:Nakshatra@214@cluster0-qmtcz.mongodb.net/<dbname>?retryWrites=true&w=majority";
    Choose Region, Free Tier and add user (able to read/write any database) and whitelist IP. (0.0.0.0 for any user to access across different IPs with specified username and password).
     
2. Create a project folder and set up package.json file 
    use command : npm init -y

3. Install required packages.
    bcrypt.js 
        - A library to help you hash passwords.

if bcrypt fails...
Node comes with npm pre-installed, but the manager is updated more frequently than Node. Run npm -v to see which version you have, then npm install npm@latest -g to install the newest npm update. Run npm -v again if you want to make sure npm updated correctly.

To update Node, you’ll need npm’s handy n module. Run this code to clear npm’s cache, install n, and install the latest stable version of Node:

1
2
3
sudo npm cache clean -f
sudo npm install -g n
sudo n stable

    connect-flash 
        - The flash is a special area of the session used for storing messages. Messages are written to the flash and cleared after being displayed to the user. 
        The flash is typically used in combination with redirects, ensuring that the message is available to the next page that is to be rendered.
        This middleware was extracted from Express 2.x, after Express 3.x removed direct support for the flash. 
        connect-flash brings this functionality back to Express 3.x, as well as any other middleware-compatible framework or application. 

    ejs - templating engine
    express - express application
    express-ejs-layouts - since ejs doesnot have any layouts we might need this package for layout support for ejs in express.
    express-session - since it is a prerequisite for connect-flash
    mongoose - to interact with mongoDB
    passport - Passport is Express-compatible authentication middleware for Node.js. Passport's sole purpose is to authenticate requests, which it does through an extensible set of plugins known as strategies.
    password-local 
Info:
        - Strategies
            Passport uses the concept of strategies to authenticate requests. 
            Strategies can range from verifying username and password credentials, delegated authentication using OAuth (for example, via Facebook or Twitter), or federated authentication using OpenID.
            Before authenticating requests, the strategy (or strategies) used by an application must be configured.


            After this... package.json should look like this...

            {
  "name": "mvc-demo",
  "version": "1.0.0",
  "description": "",
  "main": "app.js",
  "scripts": {
    "start": "node app.js",
    "dev": "nodemon app.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "bcrypt": "^5.0.0",
    "connect-flash": "^0.1.1",
    "ejs": "^3.1.3",
    "express": "^4.17.1",
    "express-ejs-layouts": "^2.5.0",
    "express-session": "^1.17.1",
    "mongoose": "^5.9.18",
    "passport": "^0.4.1",
    "passport-local": "^1.0.0"
  },
  "devDependencies": {
    "nodemon": "^2.0.4"
  }
}

- update start script as specified in package.json

 - create a node server in app.js
_____________________________________________________________________

const express = require('express');
const app = express();
app.listen(3000, () => console.log("Server started on port 3000!"));
______________________________________________________________________

- https://localhost:3000/

        cannot get /

        bcoz we dont have routes ...

        lets create a route folder... with two files ---> users.js, index.js

        users.js --- > deals with /login /register etc
        index.js ---> deals with /homepage / /dashboard etc

-______________________________________________________________________________

        In index.js

const express = require('express');
const router = express.Router();
router.get('/', (req, res, next) => res.send('Welcome'));
module.exports = router;

check https://localhost:3000/  ---> it should display welcome

_________________________________________________________________________________

In users.js

const express = require('express');

const router = express.Router();

//Login Page
router.get('/login', (req, res, next) => res.send('login'));

//Register Page
router.get('/register', (req, res, next) => res.send('register'));

module.exports = router;


check https://localhost:3000/users/login -> login, https://localhost:3000/users/register -> register, https://localhost:3000/ -> welcome.

_________________________________________________________________________________


Now we'll add ejs .
Create a folder views---- layout.ejs, welcome.ejs (homepage), register.ejs, dashboard.ejs.

layout.ejs -- > we'll be using bootswatch.

import cdn links for font-awesome and import css for the bootswatch theme by right click on download looking for css file

import cdn links for bootstrap JS.

since we use flash --> we need bootstrap JS.  


-----

after adding all the ejs files and having all ejs files working ...

we need to connect to mongoDB.

/ create a config folder with file keys.js having the mongo uri with username and password.



once db is connected, we need to create our model.


once that is done do register handle. and then look for whether all entries has been made.
and there are no errors.

// once that is done we have to intinate what went wrong to user based on which field the error was.

For this we ll be using partials.
  partials are piece of html markup  

  once error messages are displayed on single line on top use bootstrap to decorate it.
  